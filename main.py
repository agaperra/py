from __future__ import division

import csv
import time
from _csv import reader
from math import exp
from random import seed, randrange
from random import random
import numpy
from PIL import Image
import os
import openpyxl
import pandas as pd


# перевод в картинку из 1 и 0
def one_zero_paint(path):
    image = Image.open(path)
    height = image.height
    width = image.width
    y_coord = 0
    D = ""
    imago = []
    while y_coord < height:
        for x_coord in range(width):
            z = image.getpixel((x_coord, y_coord))
            if z == 0:
                D = D + "1"
            else:
                D = D + "0"
        imago.append(D)
        D = ""
        y_coord += 1

    name = os.path.basename(path)
    n1 = os.path.splitext(name)[0]
    file = open(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\test\txt\\" + n1 + '.txt', 'w')
    for i in imago:
        file.write(i)
        file.write('\n')
    file.close()


def files(path):
    for packet in os.listdir(path):
        if os.path.isfile(os.path.join(path, packet)):
            yield packet


def find_one(mat):
    z = 0
    for k in range(len(mat)):
        for j in range(len(mat[k])):
            if mat[k][j] == "1":
                z = z + 1
    return z


def find_parameters(matr):
    x = numpy.array(matr)
    counter = []
    for u in range(0, 5):
        for w in range(0, 5):
            matrix_B = x[u * 29:(u + 1) * 29, w * 29:(w + 1) * 29].copy()
            m = find_one(matrix_B)
            counter.append(m)
    return counter


def create_txt():
    # перевод набора в текстовые файлы
    for file_ in files(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\test\png"):
        one_zero_paint(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\test\png\\" + file_)


def create_matrix():
    # построение подматриц
    wb = openpyxl.Workbook()
    ws = wb.active
    with open(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\test\test.csv", mode="w",
              encoding='utf-8') as w_file:
        file_writer = csv.writer(w_file, delimiter=",", lineterminator="\r")
        global_matrix = []
        array = []
        for i in range(1, 27):
            array.append("param " + str(i))
        global_matrix.append(array)
        for file_ in files(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\test\txt"):
            matrix = []
            with open(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\test\txt\\" + file_) as fin:
                for line in fin:
                    matrix.append(list(line))
                count = find_parameters(matrix)
            if file_[5] == "а":
                count.append(0)
            if file_[5] == "б":
                count.append(1)
            if file_[5] == "в":
                count.append(2)
            if file_[5] == "г":
                count.append(3)
            if file_[5] == "д":
                count.append(4)
            if file_[5] == "е":
                count.append(5)
            if file_[5] == "ж":
                count.append(6)
            global_matrix.append(list(count))
            file_writer.writerow(list(count))
        # for subarray in global_matrix:
        #     ws.append(subarray)
        # wb.save(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\train\test.xlsx")
        return global_matrix


# --------------------------------------------------------------------------------------------------------

# инициализация новой сети
def initialize_network(n_inputs, n_hidden, n_outputs):
    network = list()
    hidden_layer = [{'веса': [random() for i in range(n_inputs + 1)]} for i in range(n_hidden)]
    network.append(hidden_layer)
    output_layer = [{'веса': [random() for i in range(n_hidden + 1)]} for i in range(n_outputs)]
    network.append(output_layer)
    return network


# Вычисление активации нейрона для входного сигнала
def activate(weights, inputs):
    activation = weights[-1]
    for i in range(len(weights) - 1):
        temp = weights[i] * inputs[i]
        activation = activation + temp
    return activation


# Активация передаточных нейронов
def transfer(activation):
    return 1.0 / (1.0 + exp(-activation))


# Прямое распространение входного сигнала на сетевой выход
def forward_propagate(network, row):
    inputs = row
    for layer in network:
        new_inputs = []
        for neuron in layer:
            activation = activate(neuron['веса'], inputs)
            neuron['выход'] = transfer(activation)
            new_inputs.append(neuron['выход'])
        inputs = new_inputs
    return inputs


# Вычисление производной выхода нейрона
def transfer_derivative(output):
    return output * (1.0 - output)


# Ошибка обратного распространения и хранение в нейронах
def backward_propagate_error(network, expected):
    for i in reversed(range(len(network))):
        layer = network[i]
        errors = list()
        if i != len(network) - 1:
            for j in range(len(layer)):
                error = 0.0
                for neuron in network[i + 1]:
                    error += (neuron['веса'][j] * neuron['разница'])
                errors.append(error)
        else:
            for j in range(len(layer)):
                neuron = layer[j]
                errors.append(expected[j] - neuron['выход'])
        for j in range(len(layer)):
            neuron = layer[j]
            neuron['разница'] = errors[j] * transfer_derivative(neuron['выход'])


# Обновление весов сети с ошибкой
def update_weights(network, row, l_rate):
    for i in range(len(network)):
        inputs = row[:-1]
        if i != 0:
            inputs = [neuron['выход'] for neuron in network[i - 1]]
        for neuron in network[i]:
            for j in range(len(inputs)):
                neuron['веса'][j] += l_rate * neuron['разница'] * inputs[j]
            neuron['веса'][-1] += l_rate * neuron['разница']


# Обучение сеть для фиксированного числа эпох/итераций
def train_network(network, train, l_rate, n_epoch, n_outputs):
    for epoch in range(n_epoch):
        sum_error = 0
        for row in train:
            outputs = forward_propagate(network, row)
            expected = [0 for i_ in range(n_outputs)]
            expected[row[-1]] = 1
            sum_error += sum([(expected[ic] - outputs[ic]) ** 2 for ic in range(len(expected))])
            backward_propagate_error(network, expected)
            update_weights(network, row, l_rate)
        print('>эпоха=%d, скорость=%.3f, ошибка=%.3f' % (epoch, l_rate, sum_error))


def load_csv(filename):
    dataset = list()
    with open(filename, 'r') as file:
        csv_reader = reader(file)
        for row in csv_reader:
            if not row:
                continue
            dataset.append(row)
    return dataset


# Convert string column to float
def str_column_to_float(dataset, column):
    for row in dataset:
        row[column] = float(row[column].strip())


# Convert string column to integer
def str_column_to_int(dataset, column):
    class_values = [row[column] for row in dataset]
    unique = set(class_values)
    lookup = dict()
    for i, value in enumerate(unique):
        lookup[value] = i
    for row in dataset:
        row[column] = lookup[row[column]]
    return lookup


# --------------------------------------------------------------------------------------------------------

# Find the min and max values for each column
def dataset_minmax(dataset):
    stats = [[min(column), max(column)] for column in zip(*dataset)]
    return stats


# Rescale dataset columns to the range 0-1
def normalize_dataset(dataset, minmax):
    for row in dataset:
        for i in range(len(row) - 1):
            if row[i] == minmax[i][0] == minmax[i][1] == minmax[i][0] == 0:
                row[i] = 0
            else:
                row[i] = (row[i] - minmax[i][0]) / (minmax[i][1] - minmax[i][0])


# Split a dataset into k folds
def cross_validation_split(dataset, n_folds):
    dataset_split = list()
    dataset_copy = list(dataset)
    fold_size = int(len(dataset) / n_folds)
    for i in range(n_folds):
        fold = list()
        while len(fold) < fold_size:
            index = randrange(len(dataset_copy))
            fold.append(dataset_copy.pop(index))
        dataset_split.append(fold)
    return dataset_split


# Calculate accuracy percentage
def accuracy_metric(actual, predicted):
    correct = 0
    for i in range(len(actual)):
        if actual[i] == predicted[i]:
            correct += 1
    return correct / float(len(actual)) * 100.0


# Evaluate an algorithm using a cross validation split
def evaluate_algorithm(dataset, algorithm, n_folds, *args):
    folds = cross_validation_split(dataset, n_folds)
    scores = list()
    i = 0
    for fold in folds:
        train_set = list(folds)
        train_set.pop(i)
        # train_set.remove(fold)
        train_set = sum(train_set, [])
        test_set = list()
        for row in fold:
            row_copy = list(row)
            test_set.append(row_copy)
            row_copy[-1] = None
        predicted = algorithm(train_set, test_set, *args)
        actual = [row[-1] for row in fold]
        accuracy = accuracy_metric(actual, predicted)
        scores.append(accuracy)
        i += 1
    return scores


# Convert string column to float
def str_column_to_float(dataset, column):
    for row in dataset:
        row[column] = float(row[column].strip())


# Convert string column to integer
def str_column_to_int(dataset, column):
    class_values = [row[column] for row in dataset]
    unique = set(class_values)
    lookup = dict()
    for i, value in enumerate(unique):
        lookup[value] = i
    for row in dataset:
        row[column] = lookup[row[column]]
    return lookup


# Make a prediction with a network
def predict(network, row):
    outputs = forward_propagate(network, row)
    return outputs.index(max(outputs))


def back_propagation(train, test, l_rate, n_epoch, n_hidden):
    n_inputs = len(train[0]) - 1
    n_outputs = len(set([row[-1] for row in train]))
    network = initialize_network(n_inputs, n_hidden, n_outputs)
    train_network(network, train, l_rate, n_epoch, n_outputs)
    predictions = list()
    for row in test:
        prediction = predict(network, row)
        predictions.append(prediction)
    return (predictions)


# --------------------------------------------------------------------------------------------------------

# dataframe = load_csv(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\train\test.csv")
#
# print(dataframe)
# for i in range(len(dataframe[0]) - 1):
#     str_column_to_float(dataframe, i)
#
# for i in range(len(dataframe)):
#     for j in range(len(dataframe[0])):
#         dataframe[i][j] = int(dataframe[i][j])
#
# # количество входных параметров = 25
# n_inputs = len(dataframe[0]) - 1
# # количество выходных нейронов = 7
# n_outputs = len(set([row[-1] for row in dataframe]))
# print(n_outputs)
# # numpy.set_printoptions(threshold=numpy.inf)
# print(dataframe)
# # инициализация сети с количеством входов, выходов и скрытых нейронов
# network = initialize_network(n_inputs, 10, n_outputs)
# # обучение сети при скорости 0,5 и количестве эпох = 20
# train_network(network, dataframe, 0.8, 100, n_outputs)
# for layer in network:
#     print(layer)
# train_network(network, dataframe, 0.8, 100, n_outputs)
# for layer in network:
#     print(layer)
#
# dataset = [[0, 0, 0, 0, 0, 0, 126, 212, 7, 0, 0, 195, 329, 38, 0, 0, 210, 200, 133, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 94, 208, 0, 0, 0, 220, 324, 102, 0, 0, 140, 107, 73, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 137, 181, 26, 0, 0, 205, 284, 72, 0, 0, 172, 137, 104, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 90, 185, 0, 0, 0, 216, 318, 49, 0, 0, 154, 114, 59, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 108, 225, 17, 0, 0, 197, 216, 46, 0, 0, 127, 236, 105, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 125, 222, 17, 0, 2, 230, 206, 20, 0, 0, 203, 193, 160, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 90, 233, 23, 0, 0, 235, 234, 42, 0, 0, 140, 171, 123, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 174, 247, 12, 0, 0, 210, 260, 11, 0, 0, 164, 204, 152, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 159, 280, 8, 0, 0, 216, 289, 4, 0, 0, 215, 224, 164, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 174, 242, 0, 0, 0, 233, 288, 6, 0, 0, 151, 229, 171, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 211, 98, 0, 0, 45, 204, 273, 88, 17, 4, 183, 181, 116, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 207, 124, 0, 0, 101, 263, 0, 0, 0, 232, 177, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 148, 105, 0, 0, 83, 313, 28, 0, 0, 230, 215, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 178, 150, 0, 0, 29, 320, 0, 0, 0, 281, 223, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 155, 152, 0, 0, 87, 290, 0, 0, 0, 307, 199, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 9, 0, 0, 0, 216, 156, 0, 0, 77, 220, 0, 0, 0, 332, 168, 0, 0, 0, 3, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 189, 207, 0, 0, 247, 391, 0, 0, 0, 241, 190, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 67, 196, 0, 0, 153, 397, 0, 0, 0, 280, 167, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 211, 176, 0, 0, 142, 291, 0, 0, 0, 342, 159, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 171, 148, 0, 0, 32, 348, 0, 0, 0, 320, 207, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 169, 141, 0, 0, 89, 262, 0, 0, 0, 281, 143, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 162, 159, 0, 0, 120, 251, 0, 0, 0, 313, 143, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 248, 238, 0, 0, 68, 515, 11, 0, 0, 262, 253, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 84, 191, 211, 0, 0, 265, 259, 59, 0, 0, 224, 141, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 1, 15, 0, 0, 35, 317, 208, 0, 0, 275, 295, 0, 0, 0, 315, 219, 0, 0, 0, 5, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 199, 271, 0, 0, 52, 483, 20, 0, 0, 270, 321, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 8, 2, 0, 0, 0, 360, 171, 0, 0, 30, 552, 0, 0, 0, 192, 381, 0, 0, 0, 0, 3, 0, 0, 2],
#            [0, 0, 173, 140, 0, 0, 99, 200, 167, 0, 0, 224, 505, 116, 0, 0, 274, 204, 72, 0, 0, 110, 103, 0, 0, 2],
#            [0, 0, 37, 26, 0, 0, 0, 281, 202, 0, 0, 98, 497, 3, 0, 0, 299, 251, 0, 0, 0, 42, 1, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 280, 172, 0, 0, 64, 533, 8, 0, 0, 218, 266, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 11, 12, 0, 0, 0, 263, 222, 0, 0, 154, 505, 3, 0, 0, 240, 251, 0, 0, 0, 2, 0, 0, 0, 2],
#            [0, 0, 5, 13, 0, 0, 0, 265, 298, 0, 0, 135, 443, 6, 0, 0, 299, 244, 0, 0, 0, 3, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 2, 252, 227, 0, 0, 191, 328, 80, 0, 0, 318, 149, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 95, 262, 0, 0, 0, 224, 224, 38, 0, 0, 0, 263, 53, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 14, 203, 0, 0, 0, 194, 222, 31, 0, 0, 0, 223, 63, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 13, 233, 0, 0, 0, 195, 221, 5, 0, 0, 0, 206, 79, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 66, 170, 0, 0, 0, 204, 229, 43, 0, 0, 2, 187, 88, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 24, 197, 0, 0, 0, 201, 218, 18, 0, 0, 0, 188, 83, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 32, 285, 26, 0, 0, 157, 258, 37, 0, 0, 0, 201, 39, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 83, 188, 0, 0, 0, 166, 217, 29, 0, 0, 0, 250, 82, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 77, 235, 0, 0, 0, 238, 227, 43, 0, 0, 0, 197, 102, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 69, 200, 0, 0, 0, 186, 218, 51, 0, 0, 13, 253, 43, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 41, 239, 0, 0, 0, 190, 228, 20, 0, 0, 12, 245, 63, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 60, 213, 0, 0, 0, 148, 255, 37, 0, 0, 18, 246, 22, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 7, 275, 322, 0, 0, 109, 433, 91, 0, 0, 300, 253, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 306, 195, 0, 0, 28, 478, 60, 0, 0, 205, 148, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 5, 0, 0, 20, 397, 275, 0, 0, 57, 508, 19, 0, 0, 264, 244, 29, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 2, 22, 0, 0, 61, 214, 333, 0, 0, 100, 432, 87, 0, 0, 296, 246, 0, 0, 0, 18, 1, 0, 0, 4],
#            [0, 0, 0, 22, 0, 0, 1, 343, 302, 0, 0, 58, 502, 56, 0, 0, 324, 247, 0, 0, 0, 28, 0, 0, 0, 4],
#            [0, 0, 113, 67, 0, 0, 110, 308, 246, 0, 0, 164, 350, 32, 0, 0, 309, 110, 0, 0, 0, 68, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 391, 264, 0, 0, 8, 468, 91, 0, 0, 281, 227, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 1, 313, 323, 0, 0, 48, 426, 97, 0, 0, 394, 238, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 113, 218, 278, 0, 0, 203, 380, 153, 0, 0, 294, 274, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 12, 433, 320, 0, 0, 26, 479, 140, 0, 0, 348, 217, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 36, 436, 299, 0, 0, 226, 345, 165, 0, 0, 334, 247, 6, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 20, 186, 38, 0, 0, 233, 218, 46, 0, 0, 73, 183, 30, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 20, 184, 83, 0, 0, 221, 204, 70, 0, 0, 76, 192, 69, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 10, 170, 98, 0, 0, 250, 199, 96, 0, 0, 86, 176, 21, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 29, 166, 134, 0, 0, 240, 188, 67, 0, 0, 69, 193, 76, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 64, 184, 62, 0, 0, 268, 195, 129, 0, 0, 111, 194, 50, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 27, 200, 75, 0, 0, 274, 187, 112, 0, 0, 137, 188, 73, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 41, 171, 136, 0, 0, 246, 195, 76, 0, 0, 117, 183, 73, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 12, 185, 177, 0, 0, 283, 187, 137, 0, 0, 105, 208, 114, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 56, 182, 128, 0, 0, 267, 221, 110, 0, 0, 194, 185, 71, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 69, 170, 155, 0, 0, 271, 198, 109, 0, 0, 185, 191, 62, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 24, 208, 100, 0, 0, 278, 202, 99, 0, 0, 156, 181, 80, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 145, 104, 3, 0, 0, 327, 430, 231, 0, 0, 100, 59, 65, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 118, 170, 0, 0, 0, 231, 427, 318, 0, 0, 70, 109, 168, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 135, 173, 35, 6, 17, 287, 423, 330, 12, 0, 60, 196, 172, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 162, 122, 0, 0, 12, 381, 356, 219, 0, 0, 124, 201, 186, 2, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 211, 116, 52, 0, 0, 243, 418, 246, 0, 0, 61, 90, 131, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 119, 141, 19, 0, 0, 266, 435, 223, 1, 0, 133, 93, 197, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 155, 156, 8, 0, 0, 291, 457, 231, 0, 0, 157, 206, 207, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 108, 214, 0, 0, 0, 271, 397, 177, 0, 0, 182, 200, 162, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 182, 66, 23, 0, 0, 380, 340, 287, 0, 0, 194, 147, 99, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 192, 170, 0, 0, 0, 310, 343, 254, 0, 0, 192, 160, 152, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 29, 81, 16, 0, 0, 245, 438, 181, 0, 0, 31, 57, 2, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 24, 178, 70, 0, 0, 164, 172, 117, 0, 0, 164, 131, 86, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 47, 201, 3, 0, 0, 161, 307, 98, 0, 0, 174, 151, 115, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 78, 169, 6, 0, 16, 149, 360, 31, 3, 11, 163, 129, 104, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 68, 205, 47, 0, 0, 153, 226, 161, 0, 0, 160, 92, 120, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 41, 190, 5, 0, 0, 176, 214, 71, 0, 0, 156, 159, 108, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 21, 210, 0, 0, 0, 168, 233, 65, 0, 0, 155, 167, 98, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 21, 216, 23, 0, 0, 176, 207, 41, 0, 0, 128, 151, 90, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 64, 144, 0, 0, 0, 172, 311, 0, 0, 0, 158, 142, 117, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 3, 173, 48, 0, 0, 159, 202, 102, 0, 0, 111, 153, 67, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 5, 166, 20, 0, 0, 184, 165, 108, 0, 0, 120, 128, 93, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 58, 176, 4, 0, 0, 181, 274, 33, 0, 0, 100, 140, 100, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 65, 171, 90, 0, 0, 63, 203, 0, 0, 0, 185, 113, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 184, 85, 0, 0, 54, 229, 0, 0, 0, 209, 118, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 49, 161, 81, 0, 0, 99, 226, 0, 0, 0, 189, 120, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 64, 179, 103, 0, 0, 120, 223, 0, 0, 0, 203, 135, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 237, 101, 0, 0, 103, 258, 0, 0, 0, 200, 163, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 153, 143, 106, 0, 0, 212, 178, 0, 0, 0, 206, 110, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 175, 90, 0, 0, 119, 204, 0, 0, 0, 184, 130, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 207, 93, 0, 0, 122, 218, 0, 0, 0, 179, 125, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 54, 165, 77, 0, 0, 114, 201, 0, 0, 0, 165, 136, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 200, 97, 0, 0, 125, 281, 0, 0, 0, 179, 162, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 194, 93, 0, 0, 97, 264, 0, 0, 0, 206, 135, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 32, 0, 0, 0, 144, 235, 0, 0, 99, 405, 3, 0, 0, 262, 176, 0, 0, 0, 30, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 132, 242, 0, 0, 93, 415, 27, 0, 0, 282, 166, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 45, 0, 0, 0, 133, 239, 0, 0, 107, 383, 15, 0, 0, 275, 156, 0, 0, 0, 28, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 141, 250, 0, 0, 131, 391, 28, 0, 0, 267, 156, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 76, 0, 0, 0, 142, 258, 0, 0, 139, 320, 13, 0, 0, 234, 125, 0, 0, 0, 104, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 299, 414, 0, 0, 128, 471, 32, 0, 0, 340, 131, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 123, 207, 0, 0, 113, 354, 70, 0, 0, 202, 155, 3, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 14, 0, 0, 0, 147, 245, 0, 0, 153, 390, 4, 0, 0, 242, 140, 0, 0, 0, 13, 0, 0, 0, 2],
#            [0, 0, 0, 56, 0, 0, 0, 142, 260, 0, 0, 155, 370, 1, 0, 0, 282, 146, 0, 0, 0, 44, 0, 0, 0, 2],
#            [0, 0, 0, 8, 0, 0, 0, 137, 276, 0, 0, 171, 364, 5, 0, 0, 266, 137, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 139, 259, 0, 0, 144, 375, 35, 0, 0, 273, 171, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 71, 88, 0, 0, 63, 206, 37, 0, 0, 0, 125, 29, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 86, 39, 0, 0, 92, 191, 13, 0, 0, 0, 87, 31, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 106, 38, 0, 0, 69, 152, 37, 0, 0, 0, 82, 19, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 114, 34, 0, 0, 66, 156, 30, 0, 0, 0, 95, 35, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 79, 173, 0, 0, 0, 0, 74, 25, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 95, 40, 0, 0, 69, 173, 36, 0, 0, 0, 103, 29, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 103, 36, 0, 0, 62, 175, 25, 0, 0, 0, 113, 11, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 93, 25, 0, 0, 65, 173, 34, 0, 0, 0, 83, 24, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 53, 33, 0, 0, 48, 177, 54, 0, 0, 0, 40, 22, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 1, 104, 28, 0, 0, 44, 166, 63, 0, 0, 0, 35, 1, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 67, 23, 0, 0, 60, 218, 63, 0, 0, 0, 51, 8, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 62, 261, 128, 0, 0, 143, 276, 52, 0, 0, 93, 235, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 88, 255, 102, 0, 0, 183, 388, 76, 0, 0, 242, 108, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 5, 0, 0, 0, 6, 232, 173, 0, 0, 101, 289, 49, 0, 0, 197, 182, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 62, 222, 156, 0, 0, 155, 313, 21, 0, 0, 169, 184, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 4, 19, 0, 0, 50, 313, 197, 0, 0, 142, 327, 57, 0, 0, 260, 141, 0, 0, 0, 13, 0, 0, 0, 4],
#            [0, 0, 26, 24, 0, 0, 3, 257, 216, 0, 0, 87, 285, 65, 0, 0, 235, 177, 0, 0, 0, 16, 0, 0, 0, 4],
#            [0, 0, 35, 19, 0, 0, 39, 184, 183, 0, 0, 203, 227, 124, 0, 0, 189, 243, 0, 0, 0, 36, 0, 0, 0, 4],
#            [0, 0, 0, 9, 0, 0, 33, 246, 210, 0, 0, 207, 348, 93, 0, 0, 270, 113, 0, 0, 0, 1, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 11, 226, 219, 0, 0, 182, 271, 55, 0, 0, 233, 166, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 55, 300, 178, 0, 0, 201, 335, 116, 0, 0, 170, 170, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 43, 234, 147, 0, 0, 205, 332, 112, 0, 0, 157, 121, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 185, 96, 0, 0, 119, 190, 39, 0, 0, 89, 122, 14, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 178, 76, 0, 0, 136, 196, 37, 0, 0, 50, 146, 15, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 153, 73, 0, 0, 137, 156, 45, 0, 0, 53, 146, 26, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 159, 83, 0, 0, 157, 190, 23, 0, 0, 59, 146, 22, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 113, 77, 0, 0, 147, 206, 31, 0, 0, 71, 132, 36, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 137, 115, 0, 0, 142, 208, 60, 0, 0, 107, 131, 29, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 147, 28, 0, 0, 157, 194, 23, 0, 0, 54, 132, 41, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 100, 78, 0, 0, 110, 250, 58, 0, 0, 54, 123, 1, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 101, 77, 0, 0, 163, 192, 44, 0, 0, 66, 127, 10, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 85, 91, 0, 0, 106, 259, 61, 0, 0, 59, 124, 3, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 124, 52, 0, 0, 138, 233, 24, 0, 0, 74, 135, 37, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 190, 47, 43, 0, 0, 256, 363, 284, 0, 0, 77, 33, 58, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 90, 25, 0, 0, 0, 290, 386, 235, 0, 0, 55, 0, 8, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 53, 23, 16, 0, 0, 302, 395, 204, 0, 0, 11, 9, 55, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 55, 14, 14, 0, 0, 187, 393, 322, 0, 0, 32, 3, 25, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 40, 9, 0, 0, 0, 239, 351, 211, 0, 0, 3, 9, 43, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 53, 27, 12, 0, 0, 239, 404, 234, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 31, 12, 22, 0, 0, 297, 419, 188, 0, 0, 4, 9, 4, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 19, 7, 39, 0, 0, 201, 419, 238, 0, 0, 31, 9, 0, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 92, 3, 6, 0, 0, 319, 402, 242, 0, 0, 42, 16, 23, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 17, 25, 0, 0, 0, 199, 447, 340, 0, 0, 20, 9, 20, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 16, 325, 411, 228, 4, 0, 2, 11, 27, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 26, 595, 0, 0, 0, 64, 216, 17, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 273, 0, 0, 0, 64, 468, 0, 0, 0, 161, 257, 49, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 118, 495, 7, 0, 0, 170, 227, 55, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 217, 21, 0, 0, 77, 474, 34, 0, 0, 124, 207, 54, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 76, 489, 0, 0, 0, 110, 182, 31, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 213, 0, 0, 0, 171, 379, 0, 0, 0, 122, 134, 52, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 4, 219, 0, 0, 0, 248, 415, 0, 0, 0, 20, 169, 61, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 150, 405, 0, 0, 0, 63, 154, 42, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 160, 458, 0, 0, 0, 58, 181, 45, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 20, 324, 0, 0, 0, 234, 328, 0, 0, 0, 132, 210, 76, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 140, 428, 0, 0, 0, 69, 123, 50, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 58, 233, 119, 0, 0, 239, 170, 0, 0, 0, 260, 65, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 255, 115, 0, 0, 184, 235, 0, 0, 0, 253, 79, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 6, 293, 128, 0, 0, 116, 260, 0, 0, 0, 306, 105, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 40, 260, 93, 0, 0, 140, 205, 0, 0, 0, 256, 140, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 265, 88, 0, 0, 142, 243, 0, 0, 0, 293, 9, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 277, 92, 0, 0, 96, 216, 0, 0, 0, 301, 83, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 31, 247, 116, 0, 0, 112, 193, 0, 0, 0, 338, 69, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 32, 256, 92, 0, 0, 147, 167, 0, 0, 0, 282, 35, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 237, 106, 0, 0, 121, 191, 0, 0, 0, 306, 90, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 7, 266, 104, 0, 0, 133, 203, 0, 0, 0, 305, 102, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 240, 134, 0, 0, 206, 248, 0, 0, 0, 304, 36, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 229, 169, 0, 0, 43, 346, 0, 0, 0, 239, 238, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 195, 223, 0, 0, 87, 288, 0, 0, 0, 275, 154, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 49, 0, 0, 0, 179, 302, 0, 0, 84, 385, 17, 0, 0, 378, 119, 0, 0, 0, 51, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 161, 329, 0, 0, 66, 387, 6, 0, 0, 398, 164, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 29, 0, 0, 0, 197, 315, 0, 0, 109, 373, 1, 0, 0, 433, 27, 0, 0, 0, 27, 0, 0, 0, 2],
#            [0, 0, 0, 10, 0, 0, 0, 110, 368, 0, 0, 35, 402, 18, 0, 0, 382, 142, 0, 0, 0, 3, 0, 0, 0, 2],
#            [0, 0, 0, 81, 0, 0, 0, 234, 236, 0, 0, 100, 256, 0, 0, 0, 359, 88, 0, 0, 0, 96, 0, 0, 0, 2],
#            [0, 0, 0, 7, 0, 0, 0, 158, 343, 0, 0, 122, 353, 7, 0, 0, 406, 72, 0, 0, 0, 2, 0, 0, 0, 2],
#            [0, 0, 0, 10, 0, 0, 0, 134, 338, 0, 0, 105, 368, 13, 0, 0, 450, 47, 0, 0, 0, 13, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 145, 275, 0, 0, 102, 427, 1, 0, 0, 323, 134, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 19, 0, 0, 0, 164, 357, 0, 0, 175, 401, 2, 0, 0, 378, 147, 0, 0, 0, 20, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 71, 335, 2, 0, 0, 0, 169, 20, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 9, 251, 0, 0, 0, 25, 225, 4, 0, 0, 72, 185, 5, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 16, 194, 0, 0, 0, 83, 170, 25, 0, 0, 115, 160, 10, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 167, 0, 0, 0, 5, 268, 3, 0, 0, 26, 193, 5, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 40, 257, 0, 0, 0, 36, 203, 8, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 26, 247, 0, 0, 0, 49, 166, 11, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 34, 200, 0, 0, 0, 38, 236, 28, 0, 0, 33, 189, 1, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 30, 259, 0, 0, 0, 37, 204, 15, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 2, 167, 0, 0, 0, 56, 192, 12, 0, 0, 104, 168, 13, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 10, 249, 0, 0, 0, 44, 187, 12, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 195, 0, 0, 0, 61, 216, 0, 0, 0, 120, 171, 46, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 23, 0, 0, 0, 0, 449, 12, 0, 0, 0, 434, 2, 0, 0, 29, 283, 0, 0, 0, 2, 16, 0, 0, 4],
#            [0, 0, 0, 32, 0, 0, 0, 339, 217, 0, 0, 0, 400, 7, 0, 0, 78, 213, 0, 0, 0, 22, 12, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 268, 171, 0, 0, 7, 418, 139, 0, 0, 64, 222, 29, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 1, 0, 0, 0, 230, 348, 0, 0, 0, 375, 61, 0, 0, 98, 208, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 173, 319, 0, 0, 0, 306, 152, 0, 0, 104, 243, 10, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 242, 202, 0, 0, 0, 349, 109, 0, 0, 75, 263, 11, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 17, 0, 0, 0, 278, 278, 0, 0, 0, 318, 199, 0, 0, 90, 223, 61, 0, 0, 22, 2, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 331, 113, 0, 0, 0, 367, 137, 0, 0, 45, 245, 46, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 270, 204, 0, 0, 0, 279, 191, 0, 0, 70, 240, 31, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 2, 5, 0, 0, 0, 227, 287, 0, 0, 0, 204, 193, 0, 0, 76, 234, 31, 0, 0, 3, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 251, 63, 0, 0, 18, 357, 204, 0, 0, 43, 239, 24, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 176, 56, 0, 0, 45, 307, 1, 0, 0, 27, 206, 1, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 235, 33, 0, 0, 30, 319, 0, 0, 0, 18, 220, 7, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 185, 99, 0, 0, 57, 337, 2, 0, 0, 29, 207, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 145, 68, 0, 0, 41, 298, 0, 0, 0, 41, 201, 21, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 174, 166, 0, 0, 110, 293, 2, 0, 0, 132, 125, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 126, 137, 0, 0, 53, 372, 18, 0, 0, 63, 199, 21, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 78, 134, 0, 0, 93, 441, 15, 0, 0, 2, 246, 23, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 168, 121, 0, 0, 67, 332, 2, 0, 0, 80, 187, 9, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 217, 78, 0, 0, 175, 232, 8, 0, 0, 146, 158, 60, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 127, 166, 0, 0, 122, 306, 0, 0, 0, 154, 169, 65, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 130, 148, 0, 0, 109, 318, 46, 0, 0, 142, 143, 17, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 25, 187, 77, 0, 0, 42, 605, 47, 0, 0, 90, 112, 44, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 22, 111, 61, 0, 0, 106, 624, 116, 0, 0, 88, 81, 27, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 15, 150, 37, 0, 0, 87, 638, 137, 0, 0, 162, 146, 56, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 10, 193, 51, 0, 0, 68, 664, 158, 0, 0, 134, 97, 12, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 13, 91, 169, 0, 0, 95, 644, 149, 0, 0, 159, 76, 34, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 43, 157, 37, 0, 0, 194, 599, 139, 0, 0, 132, 82, 95, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 10, 180, 136, 0, 0, 77, 610, 133, 0, 0, 133, 83, 41, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 7, 184, 72, 0, 0, 62, 638, 177, 0, 0, 125, 153, 66, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 44, 181, 82, 0, 0, 84, 644, 125, 0, 0, 141, 126, 27, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 9, 193, 135, 0, 0, 7, 622, 162, 0, 0, 129, 80, 20, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 86, 168, 102, 0, 0, 127, 624, 110, 0, 0, 133, 188, 123, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 24, 137, 151, 0, 0, 147, 93, 201, 0, 0, 164, 200, 6, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 2, 161, 169, 0, 0, 144, 118, 139, 0, 0, 171, 205, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 1, 174, 241, 0, 0, 134, 145, 145, 0, 0, 213, 203, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 163, 119, 0, 0, 142, 162, 96, 0, 0, 182, 158, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 6, 154, 228, 0, 0, 160, 227, 102, 0, 0, 141, 160, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 152, 177, 0, 0, 141, 99, 167, 0, 0, 180, 176, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 137, 202, 0, 0, 129, 163, 152, 0, 0, 200, 171, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 157, 185, 0, 0, 126, 284, 60, 0, 0, 147, 121, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 139, 145, 0, 0, 150, 218, 127, 0, 0, 156, 108, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 3, 198, 137, 0, 0, 154, 222, 121, 0, 0, 178, 143, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 0, 0, 0, 0, 0, 164, 168, 0, 0, 125, 125, 186, 0, 0, 169, 186, 0, 0, 0, 0, 0, 0, 0, 0],
#            [0, 0, 72, 117, 19, 0, 141, 148, 0, 0, 0, 199, 119, 0, 0, 88, 148, 60, 0, 0, 45, 71, 0, 0, 0, 1],
#            [0, 0, 52, 117, 22, 0, 86, 166, 0, 0, 0, 164, 255, 0, 0, 124, 96, 85, 0, 0, 51, 84, 0, 0, 0, 1],
#            [0, 0, 3, 98, 25, 0, 72, 293, 31, 0, 4, 172, 170, 0, 0, 143, 94, 83, 0, 0, 15, 68, 0, 0, 0, 1],
#            [0, 0, 0, 90, 33, 0, 9, 217, 37, 0, 0, 144, 262, 0, 0, 108, 107, 98, 0, 0, 60, 91, 0, 0, 0, 1],
#            [0, 0, 0, 0, 0, 0, 0, 300, 100, 0, 0, 149, 265, 5, 0, 0, 232, 129, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 51, 0, 0, 0, 296, 67, 0, 0, 129, 248, 8, 0, 0, 247, 119, 0, 0, 0, 23, 0, 0, 0, 1],
#            [0, 0, 49, 138, 21, 0, 41, 334, 0, 4, 0, 180, 182, 63, 0, 94, 124, 155, 0, 0, 18, 88, 0, 0, 0, 1],
#            [0, 0, 58, 138, 9, 0, 45, 172, 0, 0, 0, 124, 300, 0, 0, 27, 130, 162, 0, 0, 43, 165, 33, 0, 0, 1],
#            [0, 0, 0, 53, 1, 0, 0, 215, 75, 0, 0, 152, 416, 0, 0, 13, 245, 158, 0, 0, 0, 46, 0, 0, 0, 1],
#            [0, 0, 24, 115, 13, 0, 24, 250, 5, 8, 8, 185, 284, 0, 0, 156, 91, 112, 0, 0, 14, 69, 0, 0, 0, 1],
#            [0, 0, 0, 5, 0, 0, 0, 231, 113, 0, 0, 137, 284, 29, 0, 0, 245, 123, 0, 0, 0, 0, 0, 0, 0, 1],
#            [0, 0, 0, 57, 0, 0, 0, 118, 181, 0, 0, 52, 383, 21, 0, 0, 196, 117, 0, 0, 0, 66, 0, 0, 0, 2],
#            [0, 0, 0, 28, 0, 0, 0, 128, 201, 0, 0, 138, 327, 4, 0, 0, 184, 127, 0, 0, 0, 58, 0, 0, 0, 2],
#            [0, 0, 0, 27, 0, 0, 0, 102, 189, 0, 0, 94, 385, 20, 0, 0, 224, 115, 0, 0, 0, 28, 0, 0, 0, 2],
#            [0, 0, 0, 12, 0, 0, 16, 157, 194, 0, 0, 242, 242, 21, 0, 0, 278, 74, 0, 0, 0, 3, 0, 0, 0, 2],
#            [0, 0, 0, 71, 0, 0, 0, 136, 189, 0, 0, 189, 304, 11, 0, 0, 268, 77, 0, 0, 0, 56, 0, 0, 0, 2],
#            [0, 0, 0, 62, 9, 0, 0, 156, 169, 25, 0, 217, 274, 11, 0, 41, 210, 100, 0, 0, 10, 62, 0, 0, 0, 2],
#            [0, 0, 0, 19, 0, 0, 0, 137, 273, 4, 0, 221, 299, 0, 0, 6, 255, 81, 0, 0, 0, 7, 0, 0, 0, 2],
#            [0, 0, 0, 6, 0, 0, 0, 154, 220, 0, 0, 256, 297, 6, 0, 0, 279, 58, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 18, 0, 0, 0, 164, 186, 0, 0, 178, 287, 0, 0, 0, 259, 102, 0, 0, 0, 16, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 6, 163, 235, 12, 0, 257, 235, 12, 0, 41, 240, 74, 0, 0, 0, 0, 0, 0, 0, 2],
#            [0, 0, 0, 17, 0, 0, 0, 122, 228, 0, 0, 128, 366, 7, 0, 0, 241, 129, 0, 0, 0, 17, 0, 0, 0, 2],
#            [0, 0, 0, 0, 0, 0, 4, 136, 0, 0, 0, 75, 143, 4, 0, 0, 0, 150, 24, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 148, 25, 0, 0, 72, 166, 20, 0, 0, 0, 166, 17, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 30, 173, 48, 0, 0, 26, 146, 0, 0, 0, 81, 126, 5, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 15, 171, 83, 0, 0, 57, 149, 0, 0, 0, 107, 135, 14, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 10, 161, 76, 0, 0, 39, 164, 0, 0, 0, 88, 113, 0, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 154, 65, 0, 0, 17, 160, 0, 0, 0, 87, 114, 0, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 10, 145, 12, 0, 0, 90, 134, 5, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 27, 139, 97, 0, 0, 3, 160, 5, 0, 0, 0, 192, 24, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 1, 127, 94, 0, 0, 40, 172, 0, 0, 0, 0, 166, 20, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 6, 170, 0, 0, 0, 48, 159, 3, 0, 0, 85, 131, 14, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 0, 89, 119, 0, 0, 54, 173, 41, 0, 0, 0, 170, 28, 0, 0, 0, 0, 0, 0, 3],
#            [0, 0, 0, 0, 0, 0, 25, 250, 161, 0, 0, 140, 245, 23, 0, 0, 259, 134, 0, 0, 0, 1, 0, 0, 0, 4],
#            [0, 0, 1, 35, 0, 0, 11, 156, 307, 0, 0, 72, 219, 4, 0, 0, 187, 75, 0, 0, 0, 27, 0, 0, 0, 4],
#            [0, 0, 0, 59, 0, 0, 37, 155, 290, 0, 0, 128, 233, 37, 0, 0, 181, 98, 0, 0, 0, 29, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 10, 159, 250, 0, 0, 154, 240, 22, 0, 0, 181, 65, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 44, 175, 310, 0, 0, 181, 281, 10, 0, 0, 262, 47, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 8, 0, 0, 37, 154, 300, 0, 0, 186, 315, 37, 0, 0, 263, 60, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 20, 185, 257, 0, 0, 224, 248, 17, 0, 0, 205, 41, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 10, 147, 232, 0, 0, 253, 261, 5, 0, 0, 226, 25, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 52, 148, 300, 0, 0, 193, 230, 6, 0, 0, 238, 53, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 2, 125, 256, 0, 0, 158, 286, 34, 0, 0, 254, 53, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 4, 0, 0, 33, 166, 251, 0, 0, 160, 304, 68, 0, 0, 242, 106, 0, 0, 0, 0, 0, 0, 0, 4],
#            [0, 0, 0, 0, 0, 0, 0, 73, 86, 0, 0, 102, 181, 10, 0, 0, 48, 99, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 91, 118, 0, 0, 128, 116, 5, 0, 0, 108, 84, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 83, 140, 0, 0, 108, 147, 35, 0, 0, 131, 94, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 67, 118, 0, 0, 82, 152, 46, 0, 0, 79, 82, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 81, 125, 0, 0, 108, 171, 26, 0, 0, 118, 68, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 91, 105, 0, 0, 157, 117, 32, 0, 0, 108, 88, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 97, 104, 0, 0, 164, 131, 45, 0, 0, 128, 35, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 64, 126, 0, 0, 160, 177, 46, 0, 0, 127, 47, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 72, 96, 0, 0, 159, 151, 60, 0, 0, 91, 95, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 82, 117, 0, 0, 139, 144, 34, 0, 0, 119, 38, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 0, 98, 94, 0, 0, 142, 134, 55, 0, 0, 91, 93, 0, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 186, 241, 156, 125, 0, 282, 325, 153, 5, 123, 50, 97, 116, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 31, 230, 127, 103, 0, 170, 361, 206, 7, 76, 90, 141, 90, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 81, 201, 184, 105, 0, 131, 440, 172, 3, 89, 150, 126, 46, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 53, 230, 242, 10, 0, 181, 490, 104, 0, 24, 168, 103, 61, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 54, 202, 79, 104, 0, 243, 321, 222, 26, 98, 21, 50, 94, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 67, 190, 104, 28, 0, 207, 457, 189, 6, 74, 134, 115, 45, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 67, 127, 85, 0, 0, 253, 379, 130, 0, 0, 53, 104, 58, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 117, 154, 74, 105, 0, 272, 406, 223, 51, 133, 114, 75, 96, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 69, 189, 100, 49, 0, 163, 388, 255, 41, 90, 124, 172, 38, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 88, 170, 143, 39, 0, 259, 467, 140, 0, 37, 117, 80, 70, 0, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 117, 197, 69, 80, 25, 332, 326, 244, 70, 163, 87, 8, 98, 0, 0, 0, 0, 0, 0, 6],
#            [0, 148, 181, 0, 0, 101, 128, 135, 222, 0, 207, 0, 234, 145, 0, 210, 20, 357, 100, 65, 161, 188, 3, 92, 0,
#             0],
#            [0, 10, 219, 161, 0, 1, 257, 18, 452, 1, 191, 37, 117, 313, 0, 219, 0, 232, 324, 80, 97, 244, 54, 10, 0, 0],
#            [0, 1, 174, 0, 0, 0, 249, 360, 118, 0, 180, 64, 233, 42, 0, 210, 37, 292, 187, 48, 17, 222, 12, 78, 3, 0],
#            [0, 3, 48, 0, 0, 45, 305, 451, 27, 0, 226, 3, 377, 0, 0, 210, 271, 286, 168, 39, 0, 29, 0, 0, 0, 0],
#            [0, 30, 27, 0, 0, 1, 288, 313, 0, 0, 175, 68, 328, 0, 0, 131, 396, 219, 156, 31, 0, 0, 64, 0, 0, 0],
#            [0, 110, 168, 0, 0, 59, 201, 341, 0, 0, 229, 0, 424, 0, 0, 186, 267, 248, 5, 47, 0, 0, 122, 145, 0, 0],
#            [0, 0, 47, 200, 90, 0, 290, 192, 5, 36, 0, 418, 372, 0, 0, 179, 74, 149, 0, 0, 64, 204, 32, 0, 0, 1],
#            [0, 47, 182, 189, 113, 170, 381, 42, 0, 0, 127, 155, 265, 0, 0, 217, 28, 152, 0, 0, 157, 106, 0, 0, 0, 1],
#            [0, 0, 71, 224, 242, 0, 245, 171, 1, 26, 35, 418, 187, 0, 0, 266, 41, 191, 0, 0, 177, 161, 2, 0, 0, 1],
#            [0, 0, 0, 15, 16, 0, 146, 320, 193, 34, 0, 137, 407, 10, 0, 53, 204, 183, 4, 0, 76, 211, 15, 0, 0, 1],
#            [0, 0, 0, 2, 18, 0, 130, 226, 205, 60, 10, 237, 271, 0, 0, 210, 191, 149, 0, 0, 0, 50, 0, 0, 0, 1],
#            [0, 0, 16, 165, 99, 0, 248, 250, 41, 36, 18, 260, 319, 0, 0, 229, 60, 100, 0, 0, 67, 116, 0, 0, 0, 1],
#            [0, 0, 11, 172, 0, 0, 0, 235, 203, 0, 0, 174, 493, 99, 0, 0, 229, 107, 28, 0, 0, 187, 45, 0, 0, 2],
#            [0, 0, 4, 221, 0, 0, 0, 235, 223, 0, 0, 216, 334, 277, 0, 0, 230, 104, 90, 0, 0, 223, 64, 0, 0, 2],
#            [0, 0, 0, 172, 0, 0, 0, 208, 279, 0, 0, 161, 429, 184, 0, 0, 326, 203, 10, 0, 0, 203, 19, 0, 0, 2],
#            [0, 0, 0, 183, 0, 0, 0, 216, 270, 0, 0, 265, 452, 55, 0, 0, 329, 160, 2, 0, 0, 232, 3, 0, 0, 2],
#            [0, 0, 0, 263, 27, 0, 0, 243, 266, 0, 0, 177, 446, 197, 0, 9, 324, 113, 56, 0, 0, 263, 44, 0, 0, 2],
#            [0, 0, 0, 233, 13, 0, 0, 240, 316, 2, 0, 146, 479, 219, 0, 11, 368, 73, 89, 0, 0, 180, 94, 0, 0, 2],
#            [0, 0, 0, 137, 0, 0, 82, 303, 207, 0, 18, 311, 239, 50, 5, 0, 294, 207, 126, 2, 0, 103, 0, 0, 0, 3],
#            [0, 0, 128, 208, 0, 0, 150, 153, 192, 0, 0, 92, 233, 0, 0, 0, 241, 234, 86, 0, 0, 182, 0, 0, 0, 3],
#            [0, 0, 91, 204, 0, 0, 165, 270, 116, 0, 9, 163, 230, 96, 6, 0, 349, 219, 55, 0, 28, 151, 0, 0, 0, 3],
#            [0, 0, 0, 31, 0, 0, 37, 318, 233, 0, 0, 188, 169, 103, 19, 39, 374, 174, 46, 0, 14, 3, 0, 0, 0, 3],
#            [0, 0, 14, 72, 0, 0, 113, 304, 175, 0, 0, 138, 196, 43, 11, 30, 421, 202, 142, 9, 23, 29, 0, 0, 0, 3],
#            [0, 0, 2, 97, 0, 0, 130, 234, 341, 0, 0, 187, 252, 6, 0, 0, 339, 188, 104, 0, 0, 33, 0, 0, 0, 3],
#            [0, 93, 241, 132, 0, 0, 222, 0, 297, 0, 0, 185, 169, 208, 0, 0, 14, 290, 232, 0, 0, 0, 194, 202, 0, 4],
#            [0, 1, 204, 63, 0, 0, 212, 96, 340, 0, 0, 249, 241, 281, 0, 0, 0, 350, 219, 0, 0, 0, 141, 127, 0, 4],
#            [0, 35, 260, 110, 0, 0, 213, 125, 216, 0, 0, 153, 337, 68, 0, 0, 242, 379, 19, 0, 0, 13, 262, 0, 0, 4],
#            [0, 0, 171, 16, 0, 0, 199, 77, 315, 0, 0, 225, 308, 181, 0, 0, 312, 127, 215, 0, 0, 18, 156, 62, 0, 4],
#            [0, 6, 241, 100, 0, 0, 206, 33, 265, 0, 0, 155, 225, 208, 0, 0, 153, 210, 212, 0, 0, 36, 191, 75, 0, 4],
#            [0, 0, 21, 0, 0, 0, 120, 231, 199, 0, 0, 141, 282, 213, 0, 0, 184, 298, 187, 0, 0, 0, 20, 0, 0, 4],
#            [0, 0, 12, 0, 0, 0, 134, 338, 31, 0, 0, 416, 155, 0, 0, 0, 354, 175, 131, 0, 0, 5, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 100, 319, 0, 0, 0, 416, 154, 86, 9, 45, 339, 152, 91, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 3, 179, 236, 0, 0, 219, 206, 97, 0, 0, 191, 142, 67, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 90, 332, 50, 0, 0, 376, 175, 16, 0, 0, 284, 130, 118, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 22, 346, 42, 0, 0, 233, 140, 0, 0, 0, 222, 170, 86, 0, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 0, 109, 360, 0, 0, 79, 368, 117, 0, 0, 185, 201, 162, 169, 43, 0, 0, 0, 0, 0, 5],
#            [0, 0, 0, 0, 0, 134, 404, 155, 153, 88, 24, 350, 352, 315, 0, 203, 45, 251, 328, 72, 0, 0, 0, 0, 0, 6],
#            [0, 10, 6, 0, 0, 131, 372, 141, 157, 52, 111, 409, 562, 177, 20, 112, 69, 400, 175, 60, 0, 0, 4, 0, 0, 6],
#            [0, 0, 0, 2, 0, 0, 67, 383, 143, 52, 0, 322, 529, 208, 0, 76, 172, 413, 149, 0, 0, 0, 3, 0, 0, 6],
#            [0, 0, 0, 0, 0, 251, 286, 209, 25, 173, 123, 409, 452, 338, 69, 165, 40, 474, 175, 27, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 0, 21, 355, 82, 26, 21, 451, 602, 240, 18, 131, 113, 407, 172, 19, 0, 0, 0, 0, 0, 6],
#            [0, 0, 0, 0, 0, 138, 206, 229, 44, 174, 32, 382, 512, 332, 4, 239, 78, 293, 237, 40, 0, 0, 0, 0, 0, 6]]
#
# network = [[{'веса': [0.791451239590739, 0.6811939366149995, 0.45779559046874074, 0.6848162120418098,
#                       0.29506561639361106, 0.3916374532778599, 0.5196053727168647, 0.36528460543507346,
#                       0.29756705198157285, 0.6998527589639677, 0.12395121667656883, 0.04238184447814752,
#                       0.6255183035139661, 0.8756835088798431, 0.12145826734943443, 0.5211280847713524,
#                       0.6517055670605121, 0.22600618615233392, 0.8019842761252328, 0.02389033003644614,
#                       0.9579103672764371, 0.7920182051534284, 0.7106451560583702, 0.8862158122497524,
#                       0.4402714943701498, 0.5918427401823024], 'выход': 1.0, 'разница': -0.0}, {
#                 'веса': [0.7553686624848248, 0.057829267695823194, 0.3705761834336472, 0.05444551445385193,
#                          0.6627837205921142, 0.6273420294470259, 0.47878868629650406, 0.19766339809738998,
#                          0.4862400958920233, 0.577383243964051, 0.924745649938335, 0.8893472860702312,
#                          0.6810227839454551, 0.24865780742370747, 0.09063176459819622, 0.8461805992331056,
#                          0.9700992056396908, 0.1887875312742202, 0.3874414226188182, 0.48165896015477827,
#                          0.5864612889997817, 0.3704308627791789, 0.1570388304999325, 0.9123373075734171,
#                          0.3324408011360904, 0.49509001433578304], 'выход': 1.0, 'разница': -0.0}], [
#                {'веса': [-1.0268401864724075, -0.756612097858998, -0.5595483985259317], 'выход': 0.08848331625209599,
#                 'разница': -0.007136535069925396},
#                {'веса': [-0.8156419601202063, -0.5106773726736473, -0.9210613470231372], 'выход': 0.09667595254536376,
#                 'разница': -0.008442683165117534},
#                {'веса': [-0.8017331930857177, -0.7126909188513271, -0.6193673388828694], 'выход': 0.10732432450195066,
#                 'разница': -0.010282294257188183},
#                {'веса': [-0.4978650834281769, -1.0356677907244345, -0.4607405109797391], 'выход': 0.12188434271930436,
#                 'разница': -0.013045104434723558},
#                {'веса': [-0.22952293158804285, -0.7756083208464152, -0.8092146540221878], 'выход': 0.14332432493387748,
#                 'разница': -0.01759771359684014},
#                {'веса': [-0.45856707604495434, -0.5403696600458672, -0.5647786574111356], 'выход': 0.17882545876304393,
#                 'разница': -0.026259966774936888},
#                {'веса': [-0.5649529778449822, -0.421649315629876, -0.17707464891079244], 'выход': 0.20459207151773848,
#                 'разница': 0.1294400377500896}]
#
#            ]
# for row in dataset:
#     prediction = predict(network, row)
#     print('Expected=%d, Got=%d' % (row[-1], prediction))

create_txt()
create_matrix()
print("Начало теста ")
start_time = time.time()
seed(1)
dataframe = load_csv(r"F:\agaperra\МЭИ\Мага\ВКР\begin\рукопись_dig_char\pr\test\test.csv")

print(dataframe)
for i in range(len(dataframe[0]) - 1):
    str_column_to_float(dataframe, i)
print(dataframe)

for i in range(len(dataframe)):
    for j in range(len(dataframe[0])):
        dataframe[i][j] = int(dataframe[i][j])
print(dataframe)
# инициализация сети
network = [[{'веса': [0.9998711436842893, 0.8396648476930032, 0.8403539459839603, 0.8655633500393406,
                      0.7929868352779639, 0.33860640753582083, 0.7074099378051565, 0.42572765870239937,
                      0.9429790827408319, 0.7740798879868777, 0.6164026813462825, 0.2298703360828036, 0.988429823172229,
                      0.5900951226557346, 0.10593140423000702, 0.3281317103637007, 0.03251821953677603,
                      0.4252603300255957, 0.17286774307690778, 0.4603074811027945, 0.604810985995482,
                      0.6033270799660793, 0.8392466043709799, 0.8696441666140148, 0.8977865127094896,
                      0.08632185278523996], 'выход': 1.0, 'разница': -0.0}, {
                'веса': [0.18033751359789674, 0.3523295818793246, 0.26021736820196395, 0.4720040860204142,
                         0.6763926021693529, 0.9762199219973926, 0.8252356163108928, 0.2283151315805213,
                         0.7115244312972497, 0.18730450286834832, 0.15006850898926294, 0.18442562598028545,
                         0.7559413023728198, 0.4752599309855615, 0.5795639796801954, 0.8814189388281396,
                         0.9408030453539363, 0.019722552562465245, 0.43168249278421755, 0.4774449683259674,
                         0.4846168182123506, 0.13560934107285316, 0.34749470086495615, 0.027789870520601556,
                         0.8495686908842355, 0.6431299071047724], 'выход': 1.0, 'разница': -0.0}, {
                'веса': [0.5575772219865851, 0.6838097998280495, 0.5771204281582254, 0.9359035165240401,
                         0.22254239214202565, 0.5176419745629479, 0.945369540284704, 0.3033091372646177,
                         0.7188522151126306, 0.6363969033599057, 0.12259286773923772, 0.2901133249813711,
                         0.3295121711352853, 0.16232395312231718, 0.4494355008073402, 0.15094687700598708,
                         0.9705958178842224, 0.8170439288517649, 0.051236988057254185, 0.5211934029341899,
                         0.13559714295702474, 0.9555610014725752, 0.6062505599515742, 0.2502686962962297,
                         0.713177239565509, 0.9414274099800283], 'выход': 1.0, 'разница': 0.0}, {
                'веса': [0.10655407223602209, 0.7465508396322124, 0.5512257394794423, 0.48775087454659516,
                         0.6671138993390633, 0.8850909426464968, 0.1683497443916877, 0.7557050786063207,
                         0.8072277347484588, 0.618722084039754, 0.21294930574303028, 0.6428196067500782,
                         0.5019977582917196, 0.7783215538152499, 0.08285000468168202, 0.21951076534389025,
                         0.07747330632152005, 0.23862842851788535, 0.6179736821420584, 0.7638942736746301,
                         0.4593224326768388, 0.6253058685920707, 0.5774657283934781, 0.4613610035623038,
                         0.3861604305615389, 0.6571463084343926], 'выход': 1.0, 'разница': 0.0}, {
                'веса': [0.12713221939187636, 0.5663865062943911, 0.5395132717322365, 0.8303576969406572,
                         0.6028669425383196, 0.7033778590653802, 0.6989292152156705, 0.7910607573529901,
                         0.5629199584217577, 0.7644999314352404, 0.6950748907685547, 0.6341672080359072,
                         0.9278593367307845, 0.26359714982665583, 0.9717047966786242, 0.26116665962642394,
                         0.49580525799719777, 0.8959999764277402, 0.8954907708183535, 0.8706414314181916,
                         0.6980933563449243, 0.8379080306580307, 0.7479982768902674, 0.462327993159508,
                         0.9054321174147704, 0.05963567556057692], 'выход': 1.0, 'разница': -0.0}, {
                'веса': [0.36683317198801835, 0.14652000971265122, 0.7233557667415429, 0.8431755717379497,
                         0.7850501616808685, 0.6604859699585302, 0.9948807650311304, 0.49898148056305713,
                         0.5984099815781235, 0.7207646509374389, 0.855404897378872, 0.05579526636084553,
                         0.15156587640137242, 0.275014872098824, 0.9888997022266, 0.8811861481116874,
                         0.25682376106760973, 0.8723478586380848, 0.650375794856204, 0.1668246526420406,
                         0.5727853565589541, 0.5541478312600275, 0.37664805536804247, 0.32374923468875516,
                         0.30608618935264376, 0.24523616621161393], 'выход': 1.0, 'разница': 0.0}, {
                'веса': [0.8786138618379675, 0.43386473957952765, 0.03761248341684098, 0.18082661993950777,
                         0.7342976408024845, 0.3049600528229067, 0.44887478640946954, 0.7337496227943697,
                         0.9688572067665842, 0.4848673640371284, 0.9207511618828849, 0.9279723450448377,
                         0.4308532939312336, 0.709553039562808, 0.5304916461445889, 0.263567974127051,
                         0.7836927288172647, 0.27896094370352154, 0.3082538826297806, 0.6008447376820936,
                         0.9073534692530255, 0.8862433096753433, 0.34690601875446603, 0.438748220124505,
                         0.7425722769567388, 0.1040338545836541], 'выход': 1.0, 'разница': -0.0}, {
                'веса': [0.38848515604016853, 0.5642933209835727, 0.22102416920655854, 0.8294901173619995,
                         0.2565088197140515, 0.15291369034467717, 0.10805985418974295, 0.6009136781071633,
                         0.2156150971339812, 0.349530888707245, 0.6833687782479687, 0.950920886882362,
                         0.7692361965395635, 0.6794819902968551, 0.21260637401574345, 0.9392619521795473,
                         0.46774791632540247, 0.01016391789625315, 0.49946562061951316, 0.9187399986479848,
                         0.126989950733853, 0.9592162710004138, 0.4047559906592175, 0.3170337572735449,
                         0.3998729028469735, 0.014078881195563553], 'выход': 1.0, 'разница': 0.0}, {
                'веса': [0.839254500683089, 0.6391248655714945, 0.6027978092590895, 0.015885565137198077,
                         0.6278638608539839, 0.47130384304142003, 0.2512438628384983, 0.46625853895987424,
                         0.5573774462129554, 0.786489562894072, 0.21576308923350995, 0.8922313610928205,
                         0.7795213273062253, 0.06080170668299456, 0.30193503198494664, 0.9258360907025215,
                         0.2290762390748341, 0.00733577290166143, 0.8749427138175975, 0.6145140247968193,
                         0.03114644496161012, 0.27249982620753477, 0.03106905927546877, 0.40203657002213933,
                         0.5234135925811279, 0.08127664836696424], 'выход': 1.0, 'разница': 0.0}, {
                'веса': [0.19972713295423317, 0.4341957434894951, 0.7634693024212081, 0.9659307199849019,
                         0.6073265429276278, 0.5273635359427281, 0.550019866361209, 0.11869252874093383,
                         0.8196080863944566, 0.3281635517937138, 0.698201628258036, 0.5824204608943558,
                         0.8938600015998206, 0.8343467258044736, 0.5808151917145207, 0.8118619684504799,
                         0.8694261516610899, 0.4325392880936062, 0.9162366002989124, 0.15874480135930624,
                         0.8067202205660825, 0.028020645674185718, 0.5254745897493122, 0.012795697150329799,
                         0.3561485532413362, 0.6824716691205839], 'выход': 1.0, 'разница': 0.0}], [{'веса': [
    -0.6618686261573583, -0.7213242534833197, -0.6303979321574192, 0.062474037037529476, -0.27538618462137937,
    0.2117895655097472, 0.07650854493568775, -0.7215029720646813, 0.22284583942861697, -0.516483706528622,
    -0.17336645611597282], 'выход': 0.04263967342023825, 'разница': -0.0017406167789591135}, {'веса': [
    -0.4310178690589077, -0.38753754320850353, -0.6696925132293757, 0.16681143664198939, -0.26314541164762106,
    -0.1786892366252833, -0.6058650167192813, -0.07409851920950104, -0.08446713469408648, -0.28524882995256023,
    -0.2108095121138539], 'выход': 0.047196767362446324, 'разница': -0.0021224024053829427}, {'веса': [
    0.1531312120926713, 0.27240362141170105, -0.4400224405430757, 0.05418216607234335, -0.5140032456856287,
    -0.4487774264846678, -0.558373988306151, -0.6192056511440596, 0.07332566318317954, -0.37153950832088867,
    -0.4973605842474832], 'выход': 0.05353652296980624, 'разница': -0.002712715088941553}, {'веса': [-0.21701952649473,
                                                                                                     -0.23151421452304616,
                                                                                                     -0.10504087944858283,
                                                                                                     0.10287432248334713,
                                                                                                     -0.6378589305913243,
                                                                                                     -0.5735214932179247,
                                                                                                     0.060329572111076535,
                                                                                                     -0.6030149281345936,
                                                                                                     -0.46189897527196666,
                                                                                                     -0.0772605953474119,
                                                                                                     0.01500039883839422],
                                                                                            'выход': 0.06321058665200939,
                                                                                            'разница': -0.0037430154187533976},
                                                                                                   {'веса': [
                                                                                                       -0.23220751690862595,
                                                                                                       -0.324668868331527,
                                                                                                       -0.20174093639994256,
                                                                                                       -0.011106488868873868,
                                                                                                       -0.36458940589964584,
                                                                                                       0.22643924205784838,
                                                                                                       -0.4075217584355057,
                                                                                                       -0.44150283653396966,
                                                                                                       -0.49748637725805356,
                                                                                                       0.26969816840230987,
                                                                                                       -0.5007315339938785],
                                                                                                    'выход': 0.08071149839349577,
                                                                                                    'разница': -0.0059885633483949974},
                                                                                                   {'веса': [
                                                                                                       -0.22283573902061804,
                                                                                                       -0.08950670129729008,
                                                                                                       -0.21386387803086399,
                                                                                                       0.25390477482163454,
                                                                                                       -0.12201813691986851,
                                                                                                       -0.7291129352457622,
                                                                                                       -0.2799874011788434,
                                                                                                       -0.6581494642821749,
                                                                                                       -0.029963048520416265,
                                                                                                       -0.10825218896224742,
                                                                                                       0.16580083005264096],
                                                                                                    'выход': 0.1294814941856631,
                                                                                                    'разница': -0.014594640869909178},
                                                                                                   {'веса': [
                                                                                                       -0.11993983004437608,
                                                                                                       -0.11888442715579223,
                                                                                                       0.14308202317064933,
                                                                                                       0.3514334316350917,
                                                                                                       -0.0852094647921976,
                                                                                                       0.38436393647627926,
                                                                                                       -0.1323981771385228,
                                                                                                       -0.017497050400998804,
                                                                                                       0.12005585886324162,
                                                                                                       0.6259245004666995,
                                                                                                       0.19704331142204373],
                                                                                                    'выход': 0.6685578670994249,
                                                                                                    'разница': 0.0734436806939627}]
           ]
seed(1)
# convert class column to integers
str_column_to_int(dataframe, len(dataframe[0]) - 1)
minmax = dataset_minmax(dataframe)
normalize_dataset(dataframe, minmax)

n_folds = 5
l_rate = 0.3
n_epoch = 500
n_hidden = 5
scores = evaluate_algorithm(dataframe, back_propagation, n_folds, l_rate, n_epoch, n_hidden)
print('Рейтинг: %s' % scores)
print('Средняя точность: %.3f%%' % (sum(scores) / float(len(scores))))
print("--- %s секунд прошло с момента старта ---" % (time.time() - start_time))
